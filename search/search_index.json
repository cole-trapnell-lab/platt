{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Platt constitutes a bioinformatic toolkit for assembling maps of genetic requirements and lineage dependencies. It works together with Hooke to compare perturbations to one another and controls in order to phenotype specimens, identify cell types and genes central to those phenotypes, and learn how cells depend on genes and on one another. </p> <p></p>"},{"location":"about/","title":"About","text":"<p>The function <code>fit_genotype_ccm()</code> * <code>genotype</code> * <code>ccs</code> * <code>ctrl_ids</code> * <code>perturbation_col</code></p> <pre><code>\nlmx1b_cds = load_monocle_objects(\"~/OneDrive/UW/Trapnell/hooke_manuscript/supplement/data_processing/prdm_projected_comb_cds/\")\n\nlmx1b_ccs = new_cell_count_set(lmx1b_cds, sample_group = \"embryo\", cell_group = \"cell_type\")\n\nlmx1b_ccm = fit_genotype_ccm(\"lmx1b\", \n                            lmx1b_ccs, \n                            ctrl_ids = c(\"control\"), \n                            perturbation_col = \"condition\")\n\n</code></pre> <pre><code>\nmake_contrast(lmx1b_ccm)\n\n</code></pre>"},{"location":"background/","title":"Background","text":"<p>Platt is implemented using the PLNmodels package. PLN models are a multivariate mixed generalized linear model with a Poisson distribution, allowing them to overcome the computational challenges posed by count data. They provide a convenient framework to perform multivariate statistical regression to describe how environmental effects or perturbations alter the relative abundances of each species. The PLN network model for multivariate count data can be viewed as a PLN model with a constraint on the coefficients of $\\Omega$. Correlations between pairs of species are captured by the variance matrix $\\Sigma$, whereas partial correlations are encoded by its inverse: the precision matrix $\\Omega$. In this setting, cell types $j$ and $k$ are associated as soon as $\\Sigma_k \\neq 0$ but are in direct interaction if and only if $\\Omega_{jk} \\neq 0$\u200b</p>"},{"location":"background/#references","title":"References","text":"<ol> <li> <p>J. Chiquet, M. Mariadassou and S. Robin: The Poisson-lognormal model as a versatile framework for the joint analysis of species abundances, Frontiers in Ecology and Evolution, 2021.</p> </li> <li> <p>J. Chiquet, M. Mariadassou and S. Robin: Variational inference for sparse network reconstruction from count data, Proceedings of the 36th International Conference on Machine Learning (ICML), 2019.</p> </li> <li> <p>J. Chiquet, M. Mariadassou and S. Robin: Variational inference for probabilistic Poisson PCA, the Annals of Applied Statistics, 12: 2674\u20132698, 2018.</p> </li> </ol>"},{"location":"deg/","title":"Differential expression analysis in Platt","text":""},{"location":"deg/#running-degs-over-a-graph","title":"Running DEGs over a graph","text":"<p>Finding regulatory genes with fate-restricted patterns may help identify new genetic requirements of cell types. For example, \u201cterminal selector\u201d and \u201cmultilineage priming (MLP)\u201d genes might activate specific fates, genes expressed in progenitors only might be required for maintaining the progenitor states, and genes excluded from certain fates might repress that fate 1-4. We can systematically identify these patterns by computing differential expression across our graphs and then classify these patterns based on a set of defined rules.  </p> <p></p> <p>See an explanation of gene patterns here:</p> <p>The function <code>compare_genes_within_state_graph()</code>:</p> <ul> <li><code>ccs</code>- a Hooke <code>cell_count_set</code> object</li> <li><code>graph</code> - an <code>igraph</code> object</li> <li><code>gene_ids</code> - a list of genes to subset the analysis to </li> <li><code>cores</code> - number of cores </li> </ul> <pre><code>pf_graph_degs = compare_genes_over_graph(pf_ccs,\n                                         pf_cell_state_graph@graph, \n                                         cores = 4)\n</code></pre> <p>The output of this table will look like this: </p> cell_state gene_class_scores pectoral fin condensate <code>&lt;tibble [14,899 \u00d7 5]&gt;</code> pectoral fin distal mesenchyme <code>&lt;tibble [14,899 \u00d7 5]&gt;</code> pectoral fin central cells <code>&lt;tibble [14,899 \u00d7 5]&gt;</code> pectoral fin bud mesoderm <code>&lt;tibble [14,899 \u00d7 5]&gt;</code> pectoral fin cleithrum <code>&lt;tibble [14,899 \u00d7 5]&gt;</code> pectoral fin bud progenitor <code>&lt;tibble [14,899 \u00d7 5]&gt;</code> <p>To unnest the dataframe: </p> <pre><code>pf_graph_degs %&gt;% \n  tidyr::unnest(gene_class_scores) %&gt;% \n  filter(pattern_activity_score &gt; 1) %&gt;%\n  filter(interpretation == \"Selectively activated\")\n\n</code></pre> cell_state gene_id data interpretation pattern_activity_score gene_short_name pectoral fin condensate ENSDARG000000062\u2026 <code>&lt;tibble&gt;</code> Selectively activated 1.02 ell2 pectoral fin condensate ENSDARG000000099\u2026 <code>&lt;tibble&gt;</code> Selectively activated 2.16 slc38a5a pectoral fin condensate ENSDARG000000106\u2026 <code>&lt;tibble&gt;</code> Selectively activated 1.86 clic2 pectoral fin condensate ENSDARG000000116\u2026 <code>&lt;tibble&gt;</code> Selectively activated 1.19 slc26a2 pectoral fin condensate ENSDARG000000124\u2026 <code>&lt;tibble&gt;</code> Selectively activated 3.77 col11a2 pectoral fin condensate ENSDARG000000309\u2026 <code>&lt;tibble&gt;</code> Selectively activated 2.00 mybl1 <p>We can check some of these markers by plotting them either in the UMAP space:</p> <pre><code>plot_cells(pf_ccs@cds, genes = c(\"emilin3a\"))\n</code></pre> <p></p> <p>... or on our platt graph:</p> <pre><code>plot_gene_expr(pf_cell_state_graph, genes = c(\"emilin3a\"))\n</code></pre> <p></p> <p>For more information about plotting on a Platt graph, see our plotting page.</p>"},{"location":"deg/#running-degs-within-each-perturbation","title":"Running DEGs within each perturbation","text":"<p>The function <code>compare_genes_within_state_graph()</code>: </p> <ul> <li><code>ccs</code>- a Hooke <code>cell_count_set</code> object</li> <li><code>perturbation_col</code> - column name of the perturbations</li> <li><code>control_ids</code> - list of control ids </li> <li><code>cell_groups</code> - subset of cell groups to run DEGs on </li> <li><code>perturbations</code> - defaults to perturbation</li> <li><code>cores</code></li> </ul> <p>For this example we will be using a subset of the skeletal muscle, for which we have 510,093 reference cells: </p> <pre><code>platt:::plot_annotations(muscle_state_graph, plot_labels = T, node_size = 4)\n\n</code></pre> <p></p> <pre><code>genes_within_cell_state = compare_genes_within_state_graph(ccs, \n                                                           perturbation_col = \"gene_target\", \n                                                           control_ids = c(\"ctrl-inj\"), \n                                                           perturbations = c(\"tbx16\", \"tbx16-msgn1\", \"tbx16-tbx16l\"),\n                                                           cores = 6)\n\ngenes_within_cell_state %&gt;% head()\n\n</code></pre> cell_group genes_within_cell_group paraxial mesoderm (tbx16+) <code>&lt;tibble [33,189 \u00d7 15]&gt;</code> paraxial mesoderm (pax3+, pax7-) <code>&lt;tibble [33,189 \u00d7 15]&gt;</code> fast-committed myocyte, pre-fusion <code>&lt;tibble [33,189 \u00d7 15]&gt;</code> fast-committed myocyte, fusing (pcdh7b+) <code>&lt;tibble [33,189 \u00d7 15]&gt;</code> head and neck mesoderm (pax3+, pax7+) <code>&lt;tibble [33,189 \u00d7 15]&gt;</code> head and neck mesoderm, migrating <code>&lt;tibble [33,189 \u00d7 15]&gt;</code> <p>The results are nested by cell type. To look at a specific knockout term, you can unnest the dataframe and filter: </p> <pre><code>genes_within_cell_state = genes_within_cell_state %&gt;% tidyr::unnest(genes_within_cell_group)\ngenes_within_cell_state %&gt;% filter(term == \"tbx16,msgn1\") %&gt;% tidyr::unnest(perturb_effects)\n\n</code></pre> term mean_log_sf ctrl_log_sf detected_genes ctrl_detected_genes id perturb_to_ctrl_raw_lfc perturb_to_ctrl_raw_lfc_se perturb_to_ctrl_raw_p_value perturb_to_ctrl_shrunken_lfc perturb_to_ctrl_shrunken_lfc_se perturb_to_ctrl_p_value effect_skew log_mean_expression coefficient_mode cell_group tbx16,msgn1 3.955547 2.302981 6042.273 2235.279 ENSDARG00000000002 -0.08138754 0.8304913 0.46096644 -0.007389409 0.25044809 0.7034408 -2.799458 -5.560817 -0.02203216 paraxial mesoderm (tbx16+) tbx16,msgn1 3.955547 2.302981 6042.273 2235.279 ENSDARG00000000018 0.88256012 0.3981750 0.01332819 0.314546764 0.34338591 0.3002582 -2.799458 -3.133384 -0.02203216 paraxial mesoderm (tbx16+) tbx16,msgn1 3.955547 2.302981 6042.273 2235.279 ENSDARG00000000019 0.04861553 0.2461786 0.42172566 0.014027290 0.13301079 0.7339044 -2.799458 -2.514816 -0.02203216 paraxial mesoderm (tbx16+) tbx16,msgn1 3.955547 2.302981 6042.273 2235.279 ENSDARG00000000068 0.03918378 0.3448263 0.45476421 0.008933895 0.16490703 0.7267108 -2.799458 -3.313506 -0.02203216 paraxial mesoderm (tbx16+) tbx16,msgn1 3.955547 2.302981 6042.273 2235.279 ENSDARG00000000069 0.22385107 0.2309466 0.16620371 0.076271650 0.15154521 0.5804131 -2.799458 -2.281009 -0.02203216 paraxial mesoderm (tbx16+) tbx16,msgn1 3.955547 2.302981 6042.273 2235.279 ENSDARG00000000086 -0.04488597 0.1612511 0.39036776 -0.014688242 0.09378365 0.7574802 -2.799458 -1.528009 -0.02203216 paraxial mesoderm (tbx16+) <p>Pax3a is a MLP gene observed in paraxial mesoderm progenitors as they commit to either head and neck mesoderm or fast muscle fates. </p> <pre><code>plot_gene_expr(muscle_state_graph, genes = c(\"pax3a\"), node_size = 4, plot_labels = F) + \n  theme(legend.position = \"right\")\n</code></pre> <p></p> <p>In the tbx16-msgn1 crispants, all of which fail to generate skeletal muscle properly, pax3a,  a key regulator of myogenesis was differentially expressed in myogenic progenitors. </p> term cell_group gene_short_name perturb_to_ctrl_shrunken_lfc perturb_to_ctrl_p_value tbx16,msgn1 paraxial mesoderm (tbx16+) pax3a -1.0584180 1.397403e-08 tbx16,msgn1 paraxial mesoderm (pax3+, pax7-) pax3a -0.7609017 2.913705e-05 <p>... we can plot the DEG fold change of pax3a in the tbx16-msgn1 mutant on the platt graph: </p> <pre><code>plot_degs(muscle_state_graph, tbx16_degs %&gt;% \n            filter(term == \"tbx16,msgn1\", gene_short_name == \"pax3a\"), node_size = 4.5)\n</code></pre> <p></p> <p>For more information about plotting on a Platt graph, see our plotting page.</p>"},{"location":"deg/#references","title":"References","text":"<ol> <li>Hobert, O. Terminal selectors of neuronal identity. Curr. Top. Dev. Biol. 116, 455\u2013475 (2016).</li> <li>Laslo, P. et al. Multilineage transcriptional priming and determination of alternate hematopoietic cell fates. Cell 126, 755\u2013766 (2006).</li> <li>Qiu, C. et al. Systematic reconstruction of cellular trajectories across mouse embryogenesis. Nat. Genet. 54, 328\u2013341 (2022).</li> <li>Packer, J. S. et al. A lineage-resolved molecular atlas of C. elegans embryogenesis at single-cell resolution. Science 365, (2019).</li> </ol>"},{"location":"dveg/","title":"Deviantly expressed genes (DvEGs)","text":"<p>Genes are \u201cdeviantly expressed\u201d (DvEG) in each perturbation, if they are 1) upregulated during a wild-type transition wild-type, but are underexpressed in perturbed cells undergoing that same transition relative to controls or 2) downregulated during a wild-type transition overexpressed in perturbed cells, but are overexpressed in perturbed cells undergoing that same transition relative to controls. </p> <p>The function <code>calculate_dvegs()</code> takes in the following inputs: </p> <ul> <li><code>perturb_degs</code> - output of <code>compare_genes_within_state_graph</code></li> <li><code>ref_degs</code> - output of <code>compare_genes_over_graph</code></li> <li><code>sig_p_val_thresh</code></li> </ul> <pre><code>sig_dvegs = calculate_dvegs(perturb_degs, \n                            ref_degs, \n                            sig_p_val_thresh = 0.05)\n\n</code></pre> <p>We can look for deviantly expressed genes in the pectoral fin in the lmx1b crispant. We first need to run WT and MT degs using <code>compare_genes_over_graph</code> and <code>compare_genes_within_state_graph</code>. For more information on these functions see our DEG page.</p> <pre><code>pf_graph_degs = compare_genes_over_graph(pf_ccs,\n                                         pf_cell_state_graph, \n                                         cores = 4)\n\nperturb_degs = compare_genes_within_state_graph(ccs, \n                                                perturbation_col = \"gene_target\", \n                                                control_ids = c(\"ctrl-inj\"), \n                                                perturbations = c(\"lmx1ba,lmx1bb\"),\n                                                cores = 6)\n\ndvegs = calculate_dvegs(perturb_degs, \n                        pf_graph_degs, \n                        sig_p_val_thresh = 0.05)                                                \n\n\n</code></pre> <p>The gene col2a1a comes up as a deviantly expressed gene in the pectoral fin condensate. In the wild type it is specifically upregulated, as shown on the Platt graph: </p> <pre><code>plot_gene_expr(pf_state_graph, genes = c(\"col2a1a\"))\n</code></pre> <p></p> <p>In the lmx1b KO, col2a1a has significantly lower expression in the mutant than in the wild type. We can plot it on the Platt graph:</p> <pre><code>plot_degs(pf_state_graph, perturb_degs %&gt;% filter(gene_short_name == \"col2a1a\"))\n</code></pre> <p></p> <p>For more information on how to plotting Platt graphs, see our plotting page. </p>"},{"location":"graphs/","title":"Graphs","text":""},{"location":"graphs/#platts-graph-algorithm","title":"Platt's graph algorithm:","text":"<p>Before we build our own graphs, let's use a basic graph example </p> <pre><code>state_graph = data.frame(from = c(\"early notochord progenitor\", \n                                  \"early notochord\", \n                                  \"early vacuolated notochord\",\n                                  \"early notochord\", \n                                  \"early notochord sheath\"), \n                         to = c(\"early notochord\", \n                                \"early vacuolated notochord\", \n                                \"late vacuolated notochord\", \n                                \"early notochord sheath\", \n                                \"late notochord sheath\")) %&gt;% \n                         igraph::graph_from_data_frame() \n\nplot(my_graph)\n</code></pre> <p></p>"},{"location":"graphs/#making-a-cell_state_graph-object","title":"Making a cell_state_graph object","text":"<p>The <code>new_cell_state_graph</code> function takes the following as input:</p> <ul> <li><code>cell_state_graph</code> - an igraph object</li> <li><code>ccs</code> - a Hooke <code>cell_count_set</code> object</li> </ul> <pre><code>notochord_state_graph = new_cell_state_graph(state_graph, ccs)\nplot_annotations(notochord_state_graph, node_size = 4.5)\n</code></pre> <p></p>"},{"location":"graphs/#larger-graphs","title":"Larger graphs","text":"<p>if you have a larger graph that you want to plot by tissue level annotation, you can specify  a grouping in <code>new_cell_state_graph</code> and the number of layers you want to arrange each group in </p> <pre><code>ref_state_graph = new_cell_state_graph(combined_state_graph, \n                                       ref_ccs, \n                                       group_nodes_by=\"projection_group\", \n                                       num_layers=3)\n\n\nplot_by_annotations(ref_state_graph) + theme(legend.position = \"none\")\n\n</code></pre> <p></p>"},{"location":"graphs/#manipulating-graphs","title":"Manipulating graphs","text":"<p>Get the parents:</p> <ul> <li><code>cell_state_graph</code></li> <li><code>cell_state</code></li> </ul> <pre><code>get_parents(cell_state_graph@graph, cell_state)\n</code></pre> <p>For example:</p> <pre><code>&gt; get_parents(notochord_state_graph@graph, \"early vacuolated notochord\")\n</code></pre> <p>returns</p> <pre><code>&gt; \"early notochord\"\n</code></pre> <p>Get the children:</p> <ul> <li><code>cell_state_graph</code></li> <li><code>cell_state</code> </li> </ul> <pre><code>get_children(cell_state_graph@graph, cell_state)\n</code></pre> <p>For example:</p> <pre><code>&gt; get_children(notochord_state_graph@graph, \"early vacuolated notochord\")\n</code></pre> <p>returns: </p> <pre><code>&gt; \"late vacuolated notochord\"\n</code></pre> <p>Get the siblings:</p> <ul> <li><code>cell_state_graph</code></li> <li><code>cell_state</code></li> </ul> <pre><code>get_siblings(cell_state_graph@graph, cell_state)\n</code></pre> <p>For example: </p> <pre><code>&gt; get_siblings(notochord_state_graph@graph, \"early vacuolated notochord\")\n</code></pre> <p>returns</p> <pre><code>&gt; \"early notochord sheath\"\n</code></pre>"},{"location":"graphs/#constructing-a-graph","title":"Constructing a graph","text":"<p>We first construct a graph on clusters... </p> <pre><code>\ncds = cluster_cells(cds, random_seed = 42, res=1e-3)\ncolData(cds)$cell_state = monocle3:::clusters(cds)\n\ncluster_res = assemble_partition(cds, \n                                   partition_name = \"pectoral fin\",\n                                   sample_group = \"embryo\",\n                                   cell_group = \"cell_state\",\n                                   interval_col = \"timepoint\",\n                                   component_col = \"assembly_group\",\n                                   perturbation_col = \"perturbation\",\n                                   ctrl_ids = c(\"ctrl-inj\"),\n                                   num_threads = 6,\n                                   batch_col = \"expt\")\n\n</code></pre> <p>...then contract the graph, and use it as a prior for a graph built on cell types... </p> <pre><code>\ncontract_graph = platt::contract_state_graph(ccs, cluster_res$mt_graph[[1]], group_nodes_by = \"cell_type\")\n\nglobal_wt_graph_edge_allowlist = igraph::as_data_frame(contract_graph)\nglobal_wt_graph_edge_allowlist = global_wt_graph_edge_allowlist %&gt;% select(from, to) %&gt;% distinct()\n\n\ncell_type_res = assemble_partition(cds, \n                                   partition_name = \"pectoral fin\",\n                                   sample_group = \"embryo\",\n                                   cell_group = \"cell_type\",\n                                   interval_col = \"timepoint\",\n                                   component_col = \"assembly_group\",\n                                   perturbation_col = \"perturbation\",\n                                   edge_allowlist = global_wt_graph_edge_allowlist, \n                                   ctrl_ids = c(\"ctrl-inj\"),\n                                   num_threads = 6,\n                                   batch_col = \"expt\")\n\n</code></pre> <p>The output is as follows: </p> data wt_graph mt_graph perturbation_effects perturbation_table <code>&lt;tibble [29,181 \u00d7 6]&gt;</code> <code>&lt;igraph&gt;</code> <code>&lt;igraph&gt;</code> <code>&lt;tibble [27 \u00d7 2]&gt;</code> <code>&lt;tibble [1,422 \u00d7 23]&gt;</code> <p>You can extract the graph from the dataframe to construct a <code>cell_state_graph</code>. </p> <pre><code>\npf_graph = partition_res$mt_graph[[1]]\npf_ccs = new_cell_count_set(pf_cds, cell_group = \"cell_type\", sample_group = \"embryo\")\npf_csg = new_cell_state_graph(pf_graph, pf_ccs)\n\nplot_annotations(pf_csg)\n\n</code></pre> <p></p> <p>For more information about plotting on a Platt graph, see our Plotting page</p>"},{"location":"install/","title":"Installation","text":"<p>Platt runs in the R statistical computing environment. It requires R &gt;= 3.5.0. Platt is currently only available for Github install. </p> <p>NOTE: Platt is currently in the beta phase of its development. The documentation on this page is also still under construction. Not all features currently implemented have been completely documented. Please report any issues to your github page. </p>"},{"location":"install/#required-software","title":"Required software","text":"<p>Platt builds on top of the Hooke package. </p> <pre><code>devtools::install_github(\"cole-trapnell-lab/hooke\")\n</code></pre> <p>Hooke builds on top of the Monocle3 package. </p> <pre><code>devtools::install_github(\"cole-trapnell-lab/monocle3\", ref=\"develop\")\n</code></pre> <p>Hooke depends on the PLNmodels package.</p> <pre><code>remotes::install_github(\"pln-team/PLNmodels\")\n</code></pre> <p>Finally, install the Platt package as follows: </p> <pre><code>devtools::install_github(\"cole-trapnell-lab/platt\")\n</code></pre> <p>If you wish to install the develop branch of Platt, execute:</p> <pre><code>devtools::install_github(\"cole-trapnell-lab/platt\", ref=\"develop\")\n</code></pre> <p>See our Github repository for more details.</p>"},{"location":"kinetics/","title":"Analyzing time series perturbation data with Platt","text":"<p>Platt can be used to analyze data with multiple time points across perturbations, such as the data found in  Saunders, Srivatsan, et al. Nature, in press (2023).  This study in includes ~3 million single cells across almost 2000 individual barcoded embryos.  It includes 19 timepoints (18-96 hpf) and 23 genetic loss of function experiments.  For more information about this dataset, see the ZSCAPE website.</p>"},{"location":"kinetics/#analysis-of-skeletal-muscle-with-platt","title":"Analysis of skeletal muscle with Platt","text":"<p>This vignette focuses on the skeletal muscle subset. Platt wraps some base Hooke functions to more easily fit kinetic models. You can see our Hooke kinetics tutorial here.</p> <p>The function <code>fit_wt_model</code> fits a Hooke model over time. It requires the following inputs: </p> <ul> <li>cds - a monocle3 cell_data_set object</li> <li>sample_group - a column in colData(cds) that specifies how cells are grouped into samples</li> <li>cell_group - a column in colData(cds) that specifies how cells are grouped into types or states (e.g. cluster)</li> <li>perturbation_col - column name of the perturbation ids</li> <li>ctrl_ids - a list of control ids. These will be collapsed as a single control. </li> </ul> <pre><code>muscle_wt_ccm = fit_wt_model(skeletal_muscle_cds, \n                             sample_group = \"embryo\", \n                             cell_group = \"cell_type\", \n                             perturbation_col = \"perturbation\", \n                             ctrl_ids = c(\"ctrl-inj\"))\n\n</code></pre> <p>The function<code>plot_cell_type_control_kinetics()</code> allows you to view when cell types are at their peak abundance in the data set. It requires the following inputs: </p> <ul> <li><code>wt_ccm</code> - a Hooke <code>cell_count_model</code> object (output of <code>fit_wt_model</code>)</li> <li><code>start_time</code> - start of time interval</li> <li><code>stop_time</code> - end of time interval</li> <li><code>new_data</code> - tibble of covariates to predict on</li> <li><code>color_points_by</code> - how to color counts</li> <li><code>raw_counts</code> - whether to use raw counts of conditionally predicted counts</li> </ul> <pre><code>plot_cell_type_control_kinetics(muscle_wt_ccm, \n                                start_time = 18, \n                                stop_time = 48, \n                                newdata = tibble(expt = \"GAP16\"),\n                                color_points_by = \"expt\",\n                                raw_counts = F)\n\n</code></pre> <p></p>"},{"location":"kinetics/#plotting-perturbation-kinetics","title":"Plotting perturbation kinetics","text":"<p>The function <code>fit_mt_models()</code> fits a kinetic model over time and perturbation. It requires the following inputs: </p> <ul> <li>cds - a monocle3 cell_data_set object</li> <li>sample_group - a column in colData(cds) that specifies how cells are grouped into samples</li> <li>cell_group - a column in colData(cds) that specifies how cells are grouped into types or states (e.g. cluster)</li> <li>perturbation_col - column name of the perturbation ids</li> <li>ctrl_ids - a list of control ids. These will be collapsed as a single control. </li> </ul> <pre><code>skeletal_muscle_comb_cds = load_monocle_objects(\"~/OneDrive/UW/Trapnell/hooke_manuscript/R_objects/partition_skeletal_ref_gap16_cds_v2.1.0/\")\n\ntbx16_msgn1_ccm = fit_mt_models(skeletal_muscle_comb_cds, \n                                sample_group = \"embryo\", \n                                cell_group = \"cell_type\", \n                                perturbation_col = \"perturbation\", \n                                ctrl_ids = c(\"ctrl-inj\"), \n                                mt_ids = c(\"tbx16-msgn1\"))\n\n\n</code></pre> <p>The function<code>plot_cell_type_perturb_kinetics()</code> plots a given perturbation's kinetics against the wild type.  It requires the following inputs: </p> <ul> <li><code>mt_ccm</code> - a Hooke <code>cell_count_model</code> object (output of <code>fit_mt_model</code>)</li> <li><code>start_time</code> - start of time interval</li> <li><code>stop_time</code> - end of time interval</li> <li><code>new_data</code> - tibble of covariates to predict on</li> <li><code>color_points_by</code> - how to color counts</li> <li><code>raw_counts</code> - whether to use raw counts of conditionally predicted counts</li> </ul> <pre><code>plot_cell_type_perturb_kinetics(tbx16_msgn1_ccm, \n                                newdata = tibble(\"expt\"= \"GAP16\"), \n                                raw_counts = F) + \n                                xlab(\"time\")\n</code></pre> <p></p>"},{"location":"patterns/","title":"Patterns","text":"<p>Patterns: </p> <ul> <li>Activated: expressed in self, but not in parent, no siblings</li> <li>Deactivated: not expressed in self, expressed in parent, no siblings</li> <li>Upregulated: expressed in self, expressed in parent, no siblings, higher than parent</li> <li>Downregulated: expressed in self, expressed in parent, no siblings, lower than parent</li> <li>Maintained: expressed in self, expressed in parents, no siblings, same as parent</li> </ul> <p>Prefixes: </p> <ul> <li>Specifically: pattern is present in only one of the daughter cell types</li> <li>Selectively: pattern is present in two or more of the daughter cell types but not all</li> </ul>"},{"location":"plotting/","title":"Plotting","text":""},{"location":"plotting/#plotting-a-cell_state_graph","title":"Plotting a cell_state_graph","text":"<p>The function <code>plot_annotations()</code>: </p> <ul> <li><code>cell_state_graph</code></li> <li><code>color_nodes_by</code></li> <li><code>label_nodes_by</code></li> </ul> <pre><code>plot_annotations(notochord_state_graph, node_size = 4.5)\n</code></pre> <p></p> <p>The function <code>plot_abundance_changes()</code>:</p> <ul> <li><code>cell_state_graph</code></li> <li><code>comp_abund_table</code></li> </ul> <p>To see how to run Hooke to make a <code>comp_abund_table</code>, see our differential abundance page.</p> <pre><code>plot_abundance_changes(notochord_state_graph, lmx_fc %&gt;% filter(timepoint_x==60),  node_size = 4.5)\n</code></pre> <p></p> <p>The function <code>plot_gene_expr</code>: </p> <ul> <li><code>cell_state_graph</code></li> <li><code>genes</code> - a list of genes to plot</li> <li><code>aggregate</code> - whether to sum the genes in the genes list</li> </ul> <pre><code>plot_gene_expr(notochord_state_graph, genes=c(\"lmx1bb\", \"lmx1ba\")) \n</code></pre> <p></p> <pre><code>plot_gene_expr(notochord_state_graph, genes=c(\"lmx1bb\", \"lmx1ba\"), aggregate = T) \n</code></pre> <p></p> <p>The function <code>plot_degs</code>: </p> <ul> <li><code>cell_state_graph</code></li> <li><code>deg_table</code></li> </ul> <p>To see how to run DEGs to make a deg_table, see our DEG page.</p> <pre><code>plot_degs(notochord_state_graph, lmx1b_degs %&gt;% filter(gene_short_name == \"col2a1a\"), node_size = 4.5, fc_limits = c(-1,1))\n</code></pre> <p></p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#all-functions","title":"All functions","text":""},{"location":"reference/#kinetic-functions","title":"Kinetic functions","text":"<p><code>fit_genotype_ccm()</code></p> <p>Fits a cell count model (CCM) for a given genotype using a specified dataset of cell counts (CCS). </p> <p><code>fit_wt_model()</code></p> <p>Fits a wild type (WT) model to a cell dataset (CDS) by estimating cell count dynamics over time and accounting for nuisance variables.</p> <p><code>fit_mt_models()</code></p> <p>Fits models for analyzing multi-timepoint perturbation data using a cell dataset (<code>cds</code>).</p> <p><code>plot_cell_type_control_kinetics()</code></p> <p>Generates a kinetic plot of cell type control data over time.</p> <p><code>plot_cell_type_perturb_kinetics()</code></p> <p>Generates a plot to visualize the kinetics of cell type perturbations over time.</p>"},{"location":"reference/#graph-functions","title":"Graph functions","text":"<p><code>new_cell_state_graph()</code></p> <p>Creates a new cell state graph object from an input graph and a cell count set.</p> <p><code>assemble_partition()</code></p> <p>Assembles a partition for a given cell dataset (CDS) by fitting wild-type (WT) and mutant (MT) models, constructing state transition graphs, and assessing perturbation effects.</p>"},{"location":"reference/#plotting-functions","title":"Plotting functions","text":"<p><code>plot_annotations()</code></p> <p>Generates a plot of cell state graphs with various customization options.</p> <p><code>plot_gene_expr()</code></p> <p>Plots gene expression data on a cell state graph.</p> <p><code>plot_abundance_changes()</code></p> <p>Generates a plot to visualize changes in cell state abundances.</p> <p><code>plot_degs()</code></p> <p>Plots differentially expressed genes (DEGs) on a cell state graph, with customizable appearance and layout options.</p>"},{"location":"reference/assemble_partition/","title":"<code>assemble_partition</code>","text":"<p>Assembles a partition for a given cell dataset (CDS) by fitting wild-type (WT) and mutant (MT) models, constructing state transition graphs, and assessing perturbation effects.</p> <pre><code>assemble_partition(\n  cds,\n  sample_group,\n  cell_group,\n  partition_name = NULL,\n  main_model_formula_str = NULL,\n  start_time = 18,\n  stop_time = 72,\n  interval_col = \"timepoint\",\n  nuisance_model_formula_str = \"~1\",\n  ctrl_ids = NULL,\n  mt_ids = NULL,\n  sparsity_factor = 0.01,\n  perturbation_col = \"gene_target\",\n  batch_col = \"expt\",\n  max_num_cells = NULL,\n  verbose = FALSE,\n  keep_ccs = TRUE,\n  num_threads = 1,\n  backend = \"nlopt\",\n  q_val = 0.1,\n  vhat_method = \"bootstrap\",\n  num_bootstraps = 10,\n  newdata = tibble::tibble(),\n  edge_allowlist = NULL,\n  min_lfc = 0,\n  links_between_components = c(\"ctp\", \"none\", \"strongest-pcor\", \"strong-pcor\"),\n  log_abund_detection_thresh = -5,\n  batches_excluded_from_assembly = c(),\n  component_col = \"partition\",\n  embryo_size_factors = NULL\n)\n</code></pre>"},{"location":"reference/assemble_partition/#arguments","title":"Arguments","text":"<ul> <li> <p>cds CDS object   Cell dataset to analyze.</p> </li> <li> <p>sample_group string   Column name in CDS for sample groups.</p> </li> <li> <p>cell_group string   Column name in CDS for cell groups.</p> </li> <li> <p>partition_name string   Name of the partition. Default is <code>NULL</code>.</p> </li> <li> <p>main_model_formula_str string   Main model formula. Default is <code>NULL</code>.</p> </li> <li> <p>start_time numeric   Start time for analysis. Default is <code>18</code>.</p> </li> <li> <p>stop_time numeric   Stop time for analysis. Default is <code>72</code>.</p> </li> <li> <p>interval_col string   Column name for time intervals. Default is <code>\"timepoint\"</code>.</p> </li> <li> <p>nuisance_model_formula_str string   Nuisance model formula. Default is <code>\"~1\"</code>.</p> </li> <li> <p>ctrl_ids vector   Control IDs. Default is <code>NULL</code>.</p> </li> <li> <p>mt_ids vector   Mutant IDs. Default is <code>NULL</code>.</p> </li> <li> <p>sparsity_factor numeric   Sparsity factor. Default is <code>0.01</code>.</p> </li> <li> <p>perturbation_col string   Perturbation column name. Default is <code>\"gene_target\"</code>.</p> </li> <li> <p>batch_col string   Batch column name. Default is <code>\"expt\"</code>.</p> </li> <li> <p>max_num_cells numeric   Max number of cells to include. Default is <code>NULL</code>.</p> </li> <li> <p>verbose logical   Print verbose output. Default is <code>FALSE</code>.</p> </li> <li> <p>keep_ccs logical   Keep connected components. Default is <code>TRUE</code>.</p> </li> <li> <p>num_threads numeric   Number of threads to use. Default is <code>1</code>.</p> </li> <li> <p>backend string   Optimization backend. Default is <code>\"nlopt\"</code>.</p> </li> <li> <p>q_val numeric   Q-value threshold for perturbation significance. Default is <code>0.1</code>.</p> </li> <li> <p>vhat_method string   Method for variance estimation. Default is <code>\"bootstrap\"</code>.</p> </li> <li> <p>num_bootstraps numeric   Number of bootstraps. Default is <code>10</code>.</p> </li> <li> <p>newdata tibble   New data for predictions. Default is an empty tibble.</p> </li> <li> <p>edge_allowlist list   Allowed edges in graph. Default is <code>NULL</code>.</p> </li> <li> <p>min_lfc numeric   Minimum log fold change. Default is <code>0</code>.</p> </li> <li> <p>links_between_components character vector   Types of links between components. Default is <code>c(\"ctp\", \"none\", \"strongest-pcor\", \"strong-pcor\")</code>.</p> </li> <li> <p>log_abund_detection_thresh numeric   Log abundance detection threshold. Default is <code>-5</code>.</p> </li> <li> <p>batches_excluded_from_assembly vector   Batches to exclude. Default is empty.</p> </li> <li> <p>component_col string   Column name for components. Default is <code>\"partition\"</code>.</p> </li> <li> <p>embryo_size_factors vector   Size factors for embryos. Default is <code>NULL</code>.</p> </li> </ul>"},{"location":"reference/assemble_partition/#value","title":"Value","text":"<p>A tibble containing the results of the partition assembly, including WT and MT graphs, perturbation effects, and state graph plots.</p>"},{"location":"reference/assemble_partition/#details","title":"Details","text":"<p>The function performs the following steps:</p> <ul> <li>Prepares the CDS by adding subassembly group and cell state information.  </li> <li>Fits a wild-type model and assembles a WT state transition graph.  </li> <li>Fits mutant models and assembles MT state transition graphs.  </li> <li>Assesses perturbation effects and constructs annotated graphs.  </li> <li>Handles errors gracefully and returns <code>NA</code> for failed steps.</li> </ul>"},{"location":"reference/assemble_partition/#examples","title":"Examples","text":"<pre><code>results &lt;- assemble_partition(\n  cds = my_cds,\n  sample_group = \"sample\",\n  cell_group = \"cell_type\",\n  partition_name = \"partition_1\",\n  main_model_formula_str = \"~timepoint\",\n  start_time = 18,\n  stop_time = 72\n)\n</code></pre>"},{"location":"reference/fit_genotype_ccm/","title":"<code>fit_genotype_ccm</code>","text":"<p>Fits a cell count model (CCM) for a given genotype using a specified dataset of cell counts (CCS). Supports flexible modeling of time intervals, perturbations, batch effects, and various backend optimization methods.</p> <pre><code>fit_genotype_ccm(\n  genotype,\n  ccs,\n  prior_state_transition_graph = NULL,\n  interval_col = \"timepoint\",\n  perturbation_col = \"gene_target\",\n  batch_col = \"expt\",\n  ctrl_ids = default_ctrl_ids,\n  contrast_time_start = NULL,\n  contrast_time_stop = NULL,\n  num_time_breaks = NULL,\n  independent_spline_for_ko = TRUE,\n  edge_allowlist = NULL,\n  edge_denylist = NULL,\n  penalize_by_distance = TRUE,\n  keep_ccs = TRUE,\n  vhat_method = \"bootstrap\",\n  num_threads = 1,\n  backend = \"nlopt\",\n  sparsity_factor = 0.01,\n  num_bootstraps = 10,\n  ftol_rel = 1e-6\n)\n</code></pre>"},{"location":"reference/fit_genotype_ccm/#arguments","title":"Arguments","text":"<ul> <li> <p>genotype character   The genotype to fit the model for.</p> </li> <li> <p>ccs CCS object   A cell count dataset containing the data to model.</p> </li> <li> <p>prior_state_transition_graph optional   A prior state transition graph to use as a model constraint.</p> </li> <li> <p>interval_col character   Column name in <code>ccs</code> representing time intervals. Default is <code>\"timepoint\"</code>.</p> </li> <li> <p>perturbation_col character   Column name in <code>ccs</code> representing perturbations (e.g., gene target). Default is <code>\"gene_target\"</code>.</p> </li> <li> <p>batch_col character   Column name in <code>ccs</code> representing batch info. Default is <code>\"expt\"</code>.</p> </li> <li> <p>ctrl_ids character vector   Control IDs to include in the model.</p> </li> <li> <p>contrast_time_start numeric   Start time for contrast interval. If <code>NULL</code>, uses minimum time in the data.</p> </li> <li> <p>contrast_time_stop numeric   Stop time for contrast interval. If <code>NULL</code>, uses maximum time in the data.</p> </li> <li> <p>num_time_breaks numeric   Number of time breakpoints for spline modeling. Default is <code>NULL</code> (interpreted as 3).</p> </li> <li> <p>independent_spline_for_ko logical   Use independent spline for knockout modeling. Default is <code>TRUE</code>.</p> </li> <li> <p>edge_allowlist optional   List of edges allowed in the model.</p> </li> <li> <p>edge_denylist optional   List of edges denied in the model.</p> </li> <li> <p>penalize_by_distance logical   Whether to penalize edges by distance. Default is <code>TRUE</code>.</p> </li> <li> <p>keep_ccs logical   Whether to retain the CCS object in the model. Default is <code>TRUE</code>.</p> </li> <li> <p>vhat_method character   Method to compute <code>vhat</code>. Default is <code>\"bootstrap\"</code>.</p> </li> <li> <p>num_threads numeric   Number of threads for computation. Default is <code>1</code>.</p> </li> <li> <p>backend character   Optimization backend. Default is <code>\"nlopt\"</code>.</p> </li> <li> <p>sparsity_factor numeric   Sparsity factor for model selection. Default is <code>0.01</code>.</p> </li> <li> <p>num_bootstraps numeric   Number of bootstraps for <code>vhat</code> estimation. Default is <code>10</code>.</p> </li> <li> <p>ftol_rel numeric   Relative tolerance for optimization. Default is <code>1e-6</code>.</p> </li> </ul>"},{"location":"reference/fit_genotype_ccm/#value","title":"Value","text":"<p>A fitted genotype CCM object containing the model, metadata, and fit diagnostics.</p>"},{"location":"reference/fit_genotype_ccm/#details","title":"Details","text":"<p>The function subsets the input CCS based on the genotype, control IDs, and time range. It builds a model formula based on time points and parameters, and fits the model using the chosen backend. Batch effects are corrected if multiple batches are detected. The model matrix is checked for full rank before fitting.</p>"},{"location":"reference/fit_genotype_ccm/#examples","title":"Examples","text":"<pre><code>genotype_ccm &lt;- fit_genotype_ccm(\n  genotype = \"example_genotype\",\n  ccs = example_ccs,\n  interval_col = \"timepoint\",\n  perturbation_col = \"gene_target\",\n  batch_col = \"expt\"\n)\n</code></pre>"},{"location":"reference/fit_mt_models/","title":"<code>fit_mt_models</code>","text":"<p>Fits models for analyzing multi-timepoint perturbation data using a cell dataset (<code>cds</code>). Allows specification of parameters for model formulae, perturbation settings, batch correction, and time interval handling.</p> <pre><code>fit_mt_models(\n  cds,\n  sample_group,\n  cell_group,\n  main_model_formula_str = NULL,\n  num_time_breaks = 3,\n  nuisance_model_formula_str = \"~1\",\n  ctrl_ids = NULL,\n  mt_ids = NULL,\n  sparsity_factor = 1,\n  vhat_method = \"bootstrap\",\n  interval_col = \"timepoint\",\n  perturbation_col = \"knockout\",\n  batch_col = \"expt\",\n  newdata = tibble::tibble(),\n  start_time = NULL,\n  stop_time = NULL,\n  interval_step = 2,\n  log_abund_detection_thresh = -5,\n  q_val = 0.1,\n  edge_allowlist = NULL,\n  edge_denylist = NULL,\n  keep_cds = TRUE,\n  keep_ccs = TRUE,\n  verbose = FALSE,\n  num_threads = 1,\n  backend = \"nlopt\",\n  penalize_by_distance = TRUE,\n  independent_spline_for_ko = TRUE,\n  num_bootstraps = 10,\n  embryo_size_factors = NULL,\n  batches_excluded_from_assembly = c()\n)\n</code></pre>"},{"location":"reference/fit_mt_models/#arguments","title":"Arguments","text":"<ul> <li> <p>cds cell dataset   The input dataset containing cell data.</p> </li> <li> <p>sample_group character   Sample grouping variable.</p> </li> <li> <p>cell_group character   Cell grouping variable.</p> </li> <li> <p>main_model_formula_str character   Main model formula. Default is <code>NULL</code>.</p> </li> <li> <p>num_time_breaks integer   Number of time breaks. Default is <code>3</code>.</p> </li> <li> <p>nuisance_model_formula_str character   Nuisance model formula. Default is <code>\"~1\"</code>.</p> </li> <li> <p>ctrl_ids vector   Control identifiers. Default is <code>NULL</code>.</p> </li> <li> <p>mt_ids vector   Multi-timepoint identifiers. Default is <code>NULL</code>.</p> </li> <li> <p>sparsity_factor numeric   Sparsity adjustment factor. Default is <code>1</code>.</p> </li> <li> <p>vhat_method character   Method for variance estimation. Default is <code>\"bootstrap\"</code>.</p> </li> <li> <p>interval_col character   Column name for time intervals. Default is <code>\"timepoint\"</code>.</p> </li> <li> <p>perturbation_col character   Column name for perturbation IDs. Default is <code>\"knockout\"</code>.</p> </li> <li> <p>batch_col character   Column name for batch identifiers. Default is <code>\"expt\"</code>.</p> </li> <li> <p>newdata tibble   New data for prediction. Default is an empty tibble.</p> </li> <li> <p>start_time numeric   Start time. Default is <code>NULL</code>.</p> </li> <li> <p>stop_time numeric   Stop time. Default is <code>NULL</code>.</p> </li> <li> <p>interval_step integer   Step size for time intervals. Default is <code>2</code>.</p> </li> <li> <p>log_abund_detection_thresh numeric   Log abundance detection threshold. Default is <code>-5</code>.</p> </li> <li> <p>q_val numeric   Q-value threshold for significance. Default is <code>0.1</code>.</p> </li> <li> <p>edge_allowlist vector   Allowed edges in the analysis. Default is <code>NULL</code>.</p> </li> <li> <p>edge_denylist vector   Denied edges in the analysis. Default is <code>NULL</code>.</p> </li> <li> <p>keep_cds logical   Whether to retain the CDS in output. Default is <code>TRUE</code>.</p> </li> <li> <p>keep_ccs logical   Whether to retain the CCS in output. Default is <code>TRUE</code>.</p> </li> <li> <p>verbose logical   Whether to print verbose output. Default is <code>FALSE</code>.</p> </li> <li> <p>num_threads integer   Number of computation threads. Default is <code>1</code>.</p> </li> <li> <p>backend character   Optimization backend. Default is <code>\"nlopt\"</code>.</p> </li> <li> <p>penalize_by_distance logical   Whether to penalize by distance. Default is <code>TRUE</code>.</p> </li> <li> <p>independent_spline_for_ko logical   Use independent splines for knockouts. Default is <code>TRUE</code>.</p> </li> <li> <p>num_bootstraps integer   Number of bootstraps for variance estimation. Default is <code>10</code>.</p> </li> <li> <p>embryo_size_factors named vector   Embryo size factors. Default is <code>NULL</code>.</p> </li> <li> <p>batches_excluded_from_assembly vector   Batch IDs to exclude. Default is an empty vector.</p> </li> </ul>"},{"location":"reference/fit_mt_models/#value","title":"Value","text":"<p>A tibble containing fitted perturbation models and associated metadata.</p>"},{"location":"reference/fit_mt_models/#details","title":"Details","text":"<p>This function performs multi-timepoint perturbation analysis on cell count data. It supports handling of batch effects, customizable formulas, and exclusion of specific data components. User-supplied embryo size factors and batch exclusions are supported for fine-tuned control.</p>"},{"location":"reference/fit_mt_models/#examples","title":"Examples","text":"<pre><code># Example usage:\nfit_mt_models(\n  cds,\n  sample_group = \"sample\",\n  cell_group = \"cell_type\"\n)\n</code></pre>"},{"location":"reference/fit_wt_model/","title":"<code>fit_wt_model</code>","text":"<p>Fits a wild type (WT) model to a cell dataset (CDS) by estimating cell count dynamics over time and accounting for nuisance variables. Supports various customization options for model fitting, including user-defined formulas, size factors, and control IDs.</p> <pre><code>fit_wt_model(\n  cds,\n  sample_group,\n  cell_group,\n  main_model_formula_str = NULL,\n  num_time_breaks = 4,\n  nuisance_model_formula_str = \"~1\",\n  ctrl_ids = NULL,\n  sparsity_factor = 1,\n  vhat_method = \"bootstrap\",\n  interval_col = \"timepoint\",\n  perturbation_col = \"knockout\",\n  batch_col = \"expt\",\n  start_time = NULL,\n  stop_time = NULL,\n  interval_step = 2,\n  log_abund_detection_thresh = -5,\n  keep_ccs = TRUE,\n  q_val = 0.1,\n  edge_allowlist = NULL,\n  edge_denylist = NULL,\n  base_penalty = 1,\n  keep_cds = TRUE,\n  verbose = FALSE,\n  num_threads = 1,\n  backend = \"nlopt\",\n  penalize_by_distance = TRUE,\n  embryo_size_factors = NULL,\n  batches_excluded_from_assembly = c(),\n  ...\n)\n</code></pre>"},{"location":"reference/fit_wt_model/#arguments","title":"Arguments","text":"<ul> <li> <p>cds CDS object   A cell dataset containing cell data.</p> </li> <li> <p>sample_group string   Column in <code>colData(cds)</code> defining sample groups.</p> </li> <li> <p>cell_group string   Column in <code>colData(cds)</code> defining cell groups.</p> </li> <li> <p>main_model_formula_str string   Main model formula. If <code>NULL</code>, generated automatically.</p> </li> <li> <p>num_time_breaks integer   Number of time breaks for main model formula. Default is <code>4</code>.</p> </li> <li> <p>nuisance_model_formula_str string   Nuisance model formula. Default is <code>\"~1\"</code>.</p> </li> <li> <p>ctrl_ids vector   Control IDs. If <code>NULL</code>, inferred from <code>perturbation_col</code>.</p> </li> <li> <p>sparsity_factor numeric   Sparsity factor for model selection. Default is <code>1</code>.</p> </li> <li> <p>vhat_method string   Method for estimating variance. Default is <code>\"bootstrap\"</code>.</p> </li> <li> <p>interval_col string   Column in <code>colData(cds)</code> defining time intervals. Default is <code>\"timepoint\"</code>.</p> </li> <li> <p>perturbation_col string   Column in <code>colData(cds)</code> defining perturbation groups. Default is <code>\"knockout\"</code>.</p> </li> <li> <p>batch_col string   Column in <code>colData(cds)</code> defining batch groups. Default is <code>\"expt\"</code>.</p> </li> <li> <p>start_time numeric   Start time for model. If <code>NULL</code>, inferred from data.</p> </li> <li> <p>stop_time numeric   Stop time for model. If <code>NULL</code>, inferred from data.</p> </li> <li> <p>interval_step numeric   Step size for time intervals. Default is <code>2</code>.</p> </li> <li> <p>log_abund_detection_thresh numeric   Threshold for log abundance detection. Default is <code>-5</code>.</p> </li> <li> <p>keep_ccs logical   Whether to retain the CCS. Default is <code>TRUE</code>.</p> </li> <li> <p>q_val numeric   Q-value threshold for significance. Default is <code>0.1</code>.</p> </li> <li> <p>edge_allowlist vector   Edges to allow in the model.</p> </li> <li> <p>edge_denylist vector   Edges to deny in the model.</p> </li> <li> <p>base_penalty numeric   Base penalty for model selection. Default is <code>1</code>.</p> </li> <li> <p>keep_cds logical   Whether to retain the CDS. Default is <code>TRUE</code>.</p> </li> <li> <p>verbose logical   Whether to print verbose messages. Default is <code>FALSE</code>.</p> </li> <li> <p>num_threads integer   Number of threads to use. Default is <code>1</code>.</p> </li> <li> <p>backend string   Backend for model fitting. Default is <code>\"nlopt\"</code>.</p> </li> <li> <p>penalize_by_distance logical   Whether to penalize by distance. Default is <code>TRUE</code>.</p> </li> <li> <p>embryo_size_factors named vector   Size factors for embryos. Default is <code>NULL</code>.</p> </li> <li> <p>batches_excluded_from_assembly vector   Batch IDs to exclude from assembly. Default is an empty vector.</p> </li> <li> <p>...   Additional arguments passed to the underlying model fitting functions.</p> </li> </ul>"},{"location":"reference/fit_wt_model/#value","title":"Value","text":"<p>A fitted wild type cell count model object, or <code>NULL</code> if no control cells are available.</p>"},{"location":"reference/fit_wt_model/#details","title":"Details","text":"<p>The function subsets the CDS to include only control cells based on <code>perturbation_col</code> and <code>ctrl_ids</code>. It constructs a cell count set (CCS) and fits a model using the specified formulas and parameters. If no control cells or only a single cell group is present, the function returns <code>NULL</code>.</p>"},{"location":"reference/fit_wt_model/#examples","title":"Examples","text":"<pre><code>wt_model &lt;- fit_wt_model(\n  cds = my_cds,\n  sample_group = \"sample\",\n  cell_group = \"cell_type\",\n  interval_col = \"timepoint\",\n  perturbation_col = \"knockout\",\n  batch_col = \"batch\"\n)\n</code></pre>"},{"location":"reference/new_cell_state_graph/","title":"<code>new_cell_state_graph</code>","text":"<p>Creates a new cell state graph object from an input graph and a cell count set.</p> <pre><code>new_cell_state_graph(\n  state_graph,\n  ccs,\n  color_nodes_by = NULL,\n  label_nodes_by = NULL,\n  group_nodes_by = NULL,\n  edge_weights = NULL,\n  min_edge_size = 0.1,\n  max_edge_size = 2,\n  hide_unlinked_nodes = FALSE,\n  genetic_requirements = data.frame(),\n  num_layers = 1\n)\n</code></pre>"},{"location":"reference/new_cell_state_graph/#arguments","title":"Arguments","text":"<ul> <li> <p>state_graph igraph object   Input graph of class <code>'igraph'</code>.</p> </li> <li> <p>ccs cell_count_set   Input cell count set of class <code>'cell_count_set'</code>.</p> </li> <li> <p>color_nodes_by optional   Attribute to color nodes by.</p> </li> <li> <p>label_nodes_by optional   Attribute to label nodes by.</p> </li> <li> <p>group_nodes_by optional   Attribute to group nodes by.</p> </li> <li> <p>edge_weights optional   Values to specify edge weights.</p> </li> <li> <p>min_edge_size numeric   Minimum edge size for visualization. Default is <code>0.1</code>.</p> </li> <li> <p>max_edge_size numeric   Maximum edge size for visualization. Default is <code>2</code>.</p> </li> <li> <p>hide_unlinked_nodes logical   Whether to hide unlinked nodes. Default is <code>FALSE</code>.</p> </li> <li> <p>genetic_requirements data.frame   Genetic requirements. Default is an empty data frame.</p> </li> <li> <p>num_layers integer   Number of layers for the graph layout. Default is <code>1</code>.</p> </li> </ul>"},{"location":"reference/new_cell_state_graph/#value","title":"Value","text":"<p>A new <code>cell_state_graph</code> object.</p>"},{"location":"reference/plot_abundance_changes/","title":"<code>plot_abundance_changes</code>","text":"<p>Generates a plot to visualize changes in cell state abundances.</p> <pre><code>plot_abundance_changes(\n  cell_state_graph,\n  comp_abund_table,\n  facet_group = NULL,\n  scale_node,\n  plot_labels,\n  arrow_unit,\n  node_size,\n  node_scale,\n  con_colour,\n  legend_position,\n  node_label_width,\n  group_label_font_size,\n  fc_limits\n)\n</code></pre>"},{"location":"reference/plot_abundance_changes/#arguments","title":"Arguments","text":"<ul> <li> <p>cell_state_graph object   A cell state graph containing the graph and layout info.</p> </li> <li> <p>comp_abund_table data.frame   Comparison abundance table.</p> </li> <li> <p>facet_group character   Optional column in <code>comp_abund_table</code> to facet the plot.</p> </li> <li> <p>scale_node logical   Whether to scale nodes by significance.</p> </li> <li> <p>plot_labels logical   Whether to label nodes in the plot.</p> </li> <li> <p>arrow_unit numeric   Size of arrows in the plot.</p> </li> <li> <p>node_size numeric   Base size of nodes.</p> </li> <li> <p>node_scale numeric   Scaling factor for node sizes.</p> </li> <li> <p>con_colour character   Color for node connections.</p> </li> <li> <p>legend_position character   Position of the legend.</p> </li> <li> <p>node_label_width numeric   Width of node labels.</p> </li> <li> <p>group_label_font_size numeric   Font size for group labels.</p> </li> <li> <p>fc_limits numeric vector   Length-2 vector for fold change color scale limits.</p> </li> </ul>"},{"location":"reference/plot_abundance_changes/#value","title":"Value","text":"<p>A <code>ggplot</code> object representing the abundance changes.</p>"},{"location":"reference/plot_abundance_changes/#examples","title":"Examples","text":"<pre><code># Example usage:\n# plot_abundance_changes(cell_state_graph, comp_abund_table)\n</code></pre>"},{"location":"reference/plot_annotations/","title":"<code>plot_annotations</code>","text":"<p>Generates a plot of cell state graphs with various customization options.</p> <pre><code>plot_annotations(\n  cell_state_graph,\n  color_nodes_by = NULL,\n  label_nodes_by = NULL,\n  arrow_unit = 7,\n  node_size = 2,\n  con_colour = \"darkgrey\",\n  legend_position = \"none\",\n  min_edge_size = 0.1,\n  max_edge_size = 2,\n  edge_weights = NULL,\n  plot_labels = TRUE,\n  group_label_font_size = 1,\n  node_label_width = 50\n)\n</code></pre>"},{"location":"reference/plot_annotations/#arguments","title":"Arguments","text":"<ul> <li> <p>cell_state_graph object   The cell state graph data.</p> </li> <li> <p>color_nodes_by character   Attribute to color nodes by. Default is <code>NULL</code>.</p> </li> <li> <p>label_nodes_by character   Attribute to label nodes by. Default is <code>NULL</code>.</p> </li> <li> <p>arrow_unit numeric   Size of the arrows. Default is <code>7</code>.</p> </li> <li> <p>node_size numeric   Size of the nodes. Default is <code>2</code>.</p> </li> <li> <p>con_colour character   Color of the connections. Default is <code>\"darkgrey\"</code>.</p> </li> <li> <p>legend_position character   Position of the legend. Default is <code>\"none\"</code>.</p> </li> <li> <p>min_edge_size numeric   Minimum edge size. Default is <code>0.1</code>.</p> </li> <li> <p>max_edge_size numeric   Maximum edge size. Default is <code>2</code>.</p> </li> <li> <p>edge_weights numeric vector   Weights for edges. Default is <code>NULL</code>.</p> </li> <li> <p>plot_labels logical   Whether to show labels. Default is <code>TRUE</code>.</p> </li> <li> <p>group_label_font_size numeric   Font size for group labels. Default is <code>1</code>.</p> </li> <li> <p>node_label_width numeric   Width of node labels. Default is <code>50</code>.</p> </li> </ul>"},{"location":"reference/plot_annotations/#value","title":"Value","text":"<p>A <code>ggplot</code> object representing the cell state graph with annotations.</p>"},{"location":"reference/plot_annotations/#examples","title":"Examples","text":"<pre><code># Example usage:\n# plot_annotations(cell_state_graph)\n</code></pre>"},{"location":"reference/plot_cell_type_control_kinetics/","title":"<code>plot_cell_type_control_kinetics</code>","text":"<p>Generates a kinetic plot of cell type control data over time.</p> <pre><code>plot_cell_type_control_kinetics(\n  control_ccm,\n  cell_groups = NULL,\n  start_time = NULL,\n  stop_time = NULL,\n  interval_step = 1,\n  log_abund_detection_thresh = -3,\n  delta_log_abund_loss_thresh = 0,\n  interval_col = \"timepoint\",\n  q_val = 0.01,\n  min_log_abund = -5,\n  log_scale = TRUE,\n  group_nodes_by = \"cell_type\",\n  nrow = 1,\n  newdata = tibble::tibble(),\n  color_points_by = NULL,\n  size = 0.5,\n  alpha = 0.5,\n  raw_counts = FALSE\n)\n</code></pre>"},{"location":"reference/plot_cell_type_control_kinetics/#arguments","title":"Arguments","text":"<ul> <li> <p>control_ccm object   A control cell count matrix object.</p> </li> <li> <p>cell_groups vector   Cell groups to include in the plot. Default is <code>NULL</code>.</p> </li> <li> <p>start_time numeric   Start time for the plot. If <code>NULL</code>, uses minimum timepoint in the data.</p> </li> <li> <p>stop_time numeric   Stop time for the plot. If <code>NULL</code>, uses maximum timepoint in the data.</p> </li> <li> <p>interval_step numeric   Step size for time intervals. Default is <code>1</code>.</p> </li> <li> <p>log_abund_detection_thresh numeric   Log abundance detection threshold. Default is <code>-3</code>.</p> </li> <li> <p>delta_log_abund_loss_thresh numeric   Delta log abundance loss threshold. Default is <code>0</code>.</p> </li> <li> <p>interval_col character   Column name for time intervals. Default is <code>\"timepoint\"</code>.</p> </li> <li> <p>q_val numeric   Q-value threshold for significance. Default is <code>0.01</code>.</p> </li> <li> <p>min_log_abund numeric   Minimum log abundance. Default is <code>-5</code>.</p> </li> <li> <p>log_scale logical   Whether to use a log scale for the y-axis. Default is <code>TRUE</code>.</p> </li> <li> <p>group_nodes_by character   Column name to group nodes by. Default is <code>\"cell_type\"</code>.</p> </li> <li> <p>nrow integer   Number of rows in the facet wrap. Default is <code>1</code>.</p> </li> <li> <p>newdata tibble   New data to use in the plot. Default is an empty tibble.</p> </li> <li> <p>color_points_by character   Column name to color points by. Default is <code>NULL</code>.</p> </li> <li> <p>size numeric   Size of the points in the plot. Default is <code>0.5</code>.</p> </li> <li> <p>alpha numeric   Alpha transparency of points. Default is <code>0.5</code>.</p> </li> <li> <p>raw_counts logical   Whether to use raw counts. Default is <code>FALSE</code>.</p> </li> </ul>"},{"location":"reference/plot_cell_type_control_kinetics/#value","title":"Value","text":"<p>A <code>ggplot</code> object representing the kinetic plot.</p>"},{"location":"reference/plot_cell_type_control_kinetics/#examples","title":"Examples","text":"<pre><code># Example usage:\nplot &lt;- plot_cell_type_control_kinetics(control_ccm)\nprint(plot)\n</code></pre>"},{"location":"reference/plot_cell_type_perturb_kinetics/","title":"<code>plot_cell_type_perturb_kinetics</code>","text":"<p>Generates a plot to visualize the kinetics of cell type perturbations over time.</p> <pre><code>plot_cell_type_perturb_kinetics(\n  perturbation_ccm,\n  cell_groups = NULL,\n  start_time = NULL,\n  stop_time = NULL,\n  interval_step,\n  log_abund_detection_thresh,\n  delta_log_abund_loss_thresh,\n  interval_col,\n  q_val,\n  log_scale,\n  control_ccm = perturbation_ccm,\n  control_start_time = start_time,\n  control_stop_time = stop_time,\n  group_nodes_by,\n  newdata = tibble::tibble(),\n  nrow,\n  size,\n  alpha,\n  raw_counts\n)\n</code></pre>"},{"location":"reference/plot_cell_type_perturb_kinetics/#arguments","title":"Arguments","text":"<ul> <li> <p>perturbation_ccm CCM object   A perturbation cell count matrix object.</p> </li> <li> <p>cell_groups vector   Cell groups to include. If <code>NULL</code>, all groups are included.</p> </li> <li> <p>start_time numeric   Start time. If <code>NULL</code>, uses minimum timepoint in data.</p> </li> <li> <p>stop_time numeric   Stop time. If <code>NULL</code>, uses maximum timepoint in data.</p> </li> <li> <p>interval_step numeric   Step size for time intervals.</p> </li> <li> <p>log_abund_detection_thresh numeric   Log abundance detection threshold.</p> </li> <li> <p>delta_log_abund_loss_thresh numeric   Change in log abundance loss threshold.</p> </li> <li> <p>interval_col character   Column name for time intervals.</p> </li> <li> <p>q_val numeric   Q-value threshold for significance.</p> </li> <li> <p>log_scale logical   Use log scale for y-axis.</p> </li> <li> <p>control_ccm CCM object   Control cell count matrix. Defaults to <code>perturbation_ccm</code>.</p> </li> <li> <p>control_start_time numeric   Start time for control interval. Defaults to <code>start_time</code>.</p> </li> <li> <p>control_stop_time numeric   Stop time for control interval. Defaults to <code>stop_time</code>.</p> </li> <li> <p>group_nodes_by character   Column to group nodes by.</p> </li> <li> <p>newdata tibble   New data for predictions.</p> </li> <li> <p>nrow integer   Number of rows in facet wrap.</p> </li> <li> <p>size numeric   Size of points in plot.</p> </li> <li> <p>alpha numeric   Alpha transparency for difference shading.</p> </li> <li> <p>raw_counts logical   Use raw counts.</p> </li> </ul>"},{"location":"reference/plot_cell_type_perturb_kinetics/#value","title":"Value","text":"<p>A <code>ggplot</code> object representing the kinetics of cell type perturbations.</p>"},{"location":"reference/plot_cell_type_perturb_kinetics/#examples","title":"Examples","text":"<pre><code># Example usage:\nplot &lt;- plot_cell_type_perturb_kinetics(perturbation_ccm)\nprint(plot)\n</code></pre>"},{"location":"reference/plot_degs/","title":"<code>plot_degs</code>","text":"<p>Plots differentially expressed genes (DEGs) on a cell state graph, with customizable appearance and layout options.</p> <pre><code>plot_degs(\n  cell_state_graph,\n  deg_table,\n  perturb_table = NULL,\n  facet_group = \"term\",\n  arrow_unit = 7,\n  node_size = 1,\n  con_colour = \"darkgrey\",\n  fract_expr = 0.0,\n  mean_expr = 0.0,\n  legend_position = \"none\",\n  fc_limits = c(-3, 3),\n  plot_labels = TRUE,\n  node_label_width = 50,\n  group_label_font_size = 1\n)\n</code></pre>"},{"location":"reference/plot_degs/#arguments","title":"Arguments","text":"<ul> <li> <p>cell_state_graph object   Contains the cell state graph and layout information.</p> </li> <li> <p>deg_table data.frame   Data frame with DEGs including log fold changes and p-values.</p> </li> <li> <p>perturb_table data.frame (optional)   Perturbation information. Default is <code>NULL</code>.</p> </li> <li> <p>facet_group string   Facet group for plotting. Default is <code>\"term\"</code>.</p> </li> <li> <p>arrow_unit numeric   Arrow size. Default is <code>7</code>.</p> </li> <li> <p>node_size numeric   Node size. Default is <code>1</code>.</p> </li> <li> <p>con_colour string   Connection color. Default is <code>\"darkgrey\"</code>.</p> </li> <li> <p>fract_expr numeric   Minimum fraction of expression. Default is <code>0.0</code>.</p> </li> <li> <p>mean_expr numeric   Minimum mean expression. Default is <code>0.0</code>.</p> </li> <li> <p>legend_position string   Legend position. Default is <code>\"none\"</code>.</p> </li> <li> <p>fc_limits numeric vector   Limits for fold change scale. Default is <code>c(-3, 3)</code>.</p> </li> <li> <p>plot_labels logical   Whether to display labels. Default is <code>TRUE</code>.</p> </li> <li> <p>node_label_width numeric   Width of node labels. Default is <code>50</code>.</p> </li> <li> <p>group_label_font_size numeric   Font size for group labels. Default is <code>1</code>.</p> </li> </ul>"},{"location":"reference/plot_degs/#value","title":"Value","text":"<p>A <code>ggplot</code> object representing the cell state graph with DEGs plotted.</p>"},{"location":"reference/plot_degs/#examples","title":"Examples","text":"<pre><code># Example usage:\nplot_degs(cell_state_graph, deg_table, perturb_table = NULL)\n</code></pre>"},{"location":"reference/plot_gene_expr/","title":"<code>plot_gene_expr</code>","text":"<p>Plots gene expression data on a cell state graph.</p> <pre><code>plot_gene_expr(\n  cell_state_graph,\n  genes,\n  arrow_unit = 7,\n  con_colour = \"lightgrey\",\n  fract_expr = 0.0,\n  mean_expr = 0.0,\n  legend_position = \"right\",\n  plot_labels = TRUE,\n  aggregate = FALSE,\n  scale_to_range = FALSE,\n  log_expr = FALSE,\n  node_size,\n  pseudocount = 1e-5,\n  expr_limits = NULL,\n  node_label_width = 50,\n  group_label_font_size = 1\n)\n</code></pre>"},{"location":"reference/plot_gene_expr/#arguments","title":"Arguments","text":"<ul> <li> <p>cell_state_graph object   Cell state graph data.</p> </li> <li> <p>genes vector   Gene names to plot.</p> </li> <li> <p>arrow_unit numeric   Size of arrows in the plot. Default is <code>7</code>.</p> </li> <li> <p>con_colour character   Color for connections. Default is <code>\"lightgrey\"</code>.</p> </li> <li> <p>fract_expr numeric   Minimum fraction of cells expressing the gene. Default is <code>0.0</code>.</p> </li> <li> <p>mean_expr numeric   Minimum mean expression level. Default is <code>0.0</code>.</p> </li> <li> <p>legend_position character   Legend position. Default is <code>\"right\"</code>.</p> </li> <li> <p>plot_labels logical   Whether to show labels. Default is <code>TRUE</code>.</p> </li> <li> <p>aggregate logical   Aggregate gene expression data. Default is <code>FALSE</code>.</p> </li> <li> <p>scale_to_range logical   Scale expression data to range. Default is <code>FALSE</code>.</p> </li> <li> <p>log_expr logical   Log-transform expression data. Default is <code>FALSE</code>.</p> </li> <li> <p>node_size numeric   Offset used to prevent clipping when saving plots.</p> </li> <li> <p>pseudocount numeric   Pseudocount for log transformation. Default is <code>1e-5</code>.</p> </li> <li> <p>expr_limits numeric vector   Length 2 vector specifying expression limits. Default is <code>NULL</code>.</p> </li> <li> <p>node_label_width numeric   Width of node labels. Default is <code>50</code>.</p> </li> <li> <p>group_label_font_size numeric   Font size for group labels. Default is <code>1</code>.</p> </li> </ul>"},{"location":"reference/plot_gene_expr/#value","title":"Value","text":"<p>A <code>ggplot2</code> object representing the gene expression on the cell state graph.</p>"},{"location":"reference/plot_gene_expr/#examples","title":"Examples","text":"<pre><code># Example usage:\n# plot_gene_expr(cell_state_graph, genes = c(\"Gene1\", \"Gene2\"))\n</code></pre>"}]}