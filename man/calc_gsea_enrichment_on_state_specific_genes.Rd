% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deg.R
\name{calc_gsea_enrichment_on_state_specific_genes}
\alias{calc_gsea_enrichment_on_state_specific_genes}
\title{#' classify each gene's pattern of expression in each node of the state transition graph
#' @export
classify_genes_within_node <- function(cell_group,
ccs,
pb_cds,
state_term ="cell_group",
log_fc_thresh=1,
abs_expr_thresh = 1e-3,
sig_thresh=0.05,
cores=1) {now fit models per cell group

cg_pb_cds = pb_cds[, colData(pb_cds)[\link{state_term}] == cell_group]
message(paste0("fitting regression models for ", cell_group))

pb_group_models = fit_models(cg_pb_cds,
model_formula_str=paste(paste0("~ 0 + perturbation")),
weights=colData(cg_pb_cds)$num_cells_in_group,
cores=cores) \%>\%
dplyr::select(gene_short_name, id, model, model_summary, status)

pb_coeffs = shrunken_coefficient_table(cg_pb_cds, pb_group_models, abs_expr_thresh) #coefficient_table(pb_group_models) \%>\%
dplyr::select(gene_short_name, id, term, estimate, std_err, p_value, status) \%>\%
mutate(term = stringr::str_replace_all(term, "perturbation", ""))
estimate_matrix = pb_coeffs \%>\% dplyr::select(id, term, estimate)
estimate_matrix = estimate_matrix \%>\% mutate(term = factor(term, levels=unique(colData(cg_pb_cds)\link{,"perturbation"})))
estimate_matrix = estimate_matrix \%>\% tidyr::pivot_wider(names_from=term, values_from=estimate, values_fill=0)

gene_ids = estimate_matrix$id
estimate_matrix$id = NULL
estimate_matrix = as.matrix(estimate_matrix)
row.names(estimate_matrix) = gene_ids
colnames(estimate_matrix) = as.character(colnames(estimate_matrix))

stderr_matrix = pb_coeffs \%>\% dplyr::select(id, term, std_err)
stderr_matrix = stderr_matrix \%>\% mutate(term = factor(term, levels=unique(colData(cg_pb_cds)\link{,"perturbation"})))
stderr_matrix = stderr_matrix \%>\% tidyr::pivot_wider(names_from=term, values_from=std_err, values_fill=0)

gene_ids = stderr_matrix$id
stderr_matrix$id = NULL
stderr_matrix = as.matrix(stderr_matrix)
row.names(stderr_matrix) = gene_ids
colnames(stderr_matrix) = as.character(colnames(stderr_matrix))collect the ids of any genes that threw an exception in fit_models andset their estimates and std_errors to NA

fail_gene_ids = pb_group_models \%>\% filter(status == "FAIL") \%>\% pull(id)
if (length(fail_gene_ids) > 0){
estimate_matrix\link{fail_gene_ids,} = log(abs_expr_thresh)
stderr_matrix\link{fail_gene_ids,} = Inf
}Now shrink the std errors with limmaFIXME: this needs read degrees of freedom

stderr_matrix\link{estimate_matrix < log(abs_expr_thresh)} = Inf
estimate_matrix\link{estimate_matrix < log(abs_expr_thresh)} = log(abs_expr_thresh)make a graph of control --> all perturbations

cell_perturbations = tibble(perturbation = unique(colData(pb_cds)\link{,"perturbation"}))
state_graph = data.frame("from" = cell_perturbations\link{cell_perturbations != "Control"})
state_graph$to = "Control"igraph defaults to first col > second col, so need to reverse the direction

state_graph = state_graph \%>\% igraph::graph_from_data_frame() \%>\% igraph::reverse_edges()

cell_perturbations = cell_perturbations \%>\%
dplyr::mutate(gene_classes = purrr::map(.f = purrr::possibly(
classify_genes_in_cell_state, NA_real_), .x = perturbation,
state_graph, estimate_matrix, stderr_matrix, state_term,
log_fc_thresh=log_fc_thresh,
abs_expr_thresh = abs_expr_thresh,
sig_thresh=sig_thresh,
cores=cores))

cell_perturbations = cell_perturbations \%>\%
filter(is.na(gene_classes) == FALSE) \%>\%
dplyr::mutate(gene_class_scores = purrr::map2(.f = purrr::possibly(
score_genes_for_expression_pattern, NA_real_),
.x = perturbation,
.y = gene_classes,
state_graph,
estimate_matrix))cell_perturbations$cell_group = cell_group

cell_perturbations = cell_perturbations \%>\%
filter(is.na(gene_classes) == FALSE) \%>\%
tidyr::unnest(gene_class_scores) \%>\%
dplyr::select(perturbation, gene_id, interpretation, pattern_match_score, pattern_activity_score) #\%>\%dplyr::filter(!interpretation \%in\% c("Absent", "Maintained", "Specifically maintained", "Selectively maintained"))

cell_perturbations = left_join(cell_perturbations,
rowData(ccs@cds) \%>\%
as_tibble \%>\%
select(id, gene_short_name),
by=c("gene_id"="id")) \%>\%
mutate(group = case_when(
grepl(pattern ="down", interpretation) | grepl(pattern = "de", interpretation)  ~ "Down",
grepl(pattern ="aintain", interpretation) ~ "Maintained",
T ~ "Up"
)) \%>\%
mutate(broad_interpretation = case_when(
(grepl(pattern = "ly", interpretation) & group == "Up")  ~ "Sp/Sel Up",
(grepl(pattern ="ly", interpretation) & group == "Down") ~ "Sp/Sel Down",
(!grepl(pattern ="ly", interpretation) & group == "Up") ~ "Up",
(!grepl(pattern ="ly", interpretation) & group == "Down") ~ "Down",
(grepl(pattern = "ly", interpretation) & group == "Maintained")  ~ "Sp/Sel Maintained",
(!grepl(pattern ="ly", interpretation) & group == "Maintained") ~ "Maintained",
)) \%>\%
select(-group)

cell_perturbations = left_join(cell_perturbations, pb_coeffs,
by = c("perturbation" = "term",
"gene_short_name",
"gene_id" = "id"))

return(cell_perturbations)

}}
\usage{
calc_gsea_enrichment_on_state_specific_genes(
  gene_patterns_within_state_graph,
  gene_df,
  sig_thresh = 0.1
)
}
\description{
#' classify each gene's pattern of expression in each node of the state transition graph
#' @export
classify_genes_within_node <- function(cell_group,
ccs,
pb_cds,
state_term ="cell_group",
log_fc_thresh=1,
abs_expr_thresh = 1e-3,
sig_thresh=0.05,
cores=1) {now fit models per cell group

cg_pb_cds = pb_cds[, colData(pb_cds)[\link{state_term}] == cell_group]
message(paste0("fitting regression models for ", cell_group))

pb_group_models = fit_models(cg_pb_cds,
model_formula_str=paste(paste0("~ 0 + perturbation")),
weights=colData(cg_pb_cds)$num_cells_in_group,
cores=cores) \%>\%
dplyr::select(gene_short_name, id, model, model_summary, status)

pb_coeffs = shrunken_coefficient_table(cg_pb_cds, pb_group_models, abs_expr_thresh) #coefficient_table(pb_group_models) \%>\%
dplyr::select(gene_short_name, id, term, estimate, std_err, p_value, status) \%>\%
mutate(term = stringr::str_replace_all(term, "perturbation", ""))
estimate_matrix = pb_coeffs \%>\% dplyr::select(id, term, estimate)
estimate_matrix = estimate_matrix \%>\% mutate(term = factor(term, levels=unique(colData(cg_pb_cds)\link{,"perturbation"})))
estimate_matrix = estimate_matrix \%>\% tidyr::pivot_wider(names_from=term, values_from=estimate, values_fill=0)

gene_ids = estimate_matrix$id
estimate_matrix$id = NULL
estimate_matrix = as.matrix(estimate_matrix)
row.names(estimate_matrix) = gene_ids
colnames(estimate_matrix) = as.character(colnames(estimate_matrix))

stderr_matrix = pb_coeffs \%>\% dplyr::select(id, term, std_err)
stderr_matrix = stderr_matrix \%>\% mutate(term = factor(term, levels=unique(colData(cg_pb_cds)\link{,"perturbation"})))
stderr_matrix = stderr_matrix \%>\% tidyr::pivot_wider(names_from=term, values_from=std_err, values_fill=0)

gene_ids = stderr_matrix$id
stderr_matrix$id = NULL
stderr_matrix = as.matrix(stderr_matrix)
row.names(stderr_matrix) = gene_ids
colnames(stderr_matrix) = as.character(colnames(stderr_matrix))collect the ids of any genes that threw an exception in fit_models andset their estimates and std_errors to NA

fail_gene_ids = pb_group_models \%>\% filter(status == "FAIL") \%>\% pull(id)
if (length(fail_gene_ids) > 0){
estimate_matrix\link{fail_gene_ids,} = log(abs_expr_thresh)
stderr_matrix\link{fail_gene_ids,} = Inf
}Now shrink the std errors with limmaFIXME: this needs read degrees of freedom

stderr_matrix\link{estimate_matrix < log(abs_expr_thresh)} = Inf
estimate_matrix\link{estimate_matrix < log(abs_expr_thresh)} = log(abs_expr_thresh)make a graph of control --> all perturbations

cell_perturbations = tibble(perturbation = unique(colData(pb_cds)\link{,"perturbation"}))
state_graph = data.frame("from" = cell_perturbations\link{cell_perturbations != "Control"})
state_graph$to = "Control"igraph defaults to first col > second col, so need to reverse the direction

state_graph = state_graph \%>\% igraph::graph_from_data_frame() \%>\% igraph::reverse_edges()

cell_perturbations = cell_perturbations \%>\%
dplyr::mutate(gene_classes = purrr::map(.f = purrr::possibly(
classify_genes_in_cell_state, NA_real_), .x = perturbation,
state_graph, estimate_matrix, stderr_matrix, state_term,
log_fc_thresh=log_fc_thresh,
abs_expr_thresh = abs_expr_thresh,
sig_thresh=sig_thresh,
cores=cores))

cell_perturbations = cell_perturbations \%>\%
filter(is.na(gene_classes) == FALSE) \%>\%
dplyr::mutate(gene_class_scores = purrr::map2(.f = purrr::possibly(
score_genes_for_expression_pattern, NA_real_),
.x = perturbation,
.y = gene_classes,
state_graph,
estimate_matrix))cell_perturbations$cell_group = cell_group

cell_perturbations = cell_perturbations \%>\%
filter(is.na(gene_classes) == FALSE) \%>\%
tidyr::unnest(gene_class_scores) \%>\%
dplyr::select(perturbation, gene_id, interpretation, pattern_match_score, pattern_activity_score) #\%>\%dplyr::filter(!interpretation \%in\% c("Absent", "Maintained", "Specifically maintained", "Selectively maintained"))

cell_perturbations = left_join(cell_perturbations,
rowData(ccs@cds) \%>\%
as_tibble \%>\%
select(id, gene_short_name),
by=c("gene_id"="id")) \%>\%
mutate(group = case_when(
grepl(pattern ="down", interpretation) | grepl(pattern = "de", interpretation)  ~ "Down",
grepl(pattern ="aintain", interpretation) ~ "Maintained",
T ~ "Up"
)) \%>\%
mutate(broad_interpretation = case_when(
(grepl(pattern = "ly", interpretation) & group == "Up")  ~ "Sp/Sel Up",
(grepl(pattern ="ly", interpretation) & group == "Down") ~ "Sp/Sel Down",
(!grepl(pattern ="ly", interpretation) & group == "Up") ~ "Up",
(!grepl(pattern ="ly", interpretation) & group == "Down") ~ "Down",
(grepl(pattern = "ly", interpretation) & group == "Maintained")  ~ "Sp/Sel Maintained",
(!grepl(pattern ="ly", interpretation) & group == "Maintained") ~ "Maintained",
)) \%>\%
select(-group)

cell_perturbations = left_join(cell_perturbations, pb_coeffs,
by = c("perturbation" = "term",
"gene_short_name",
"gene_id" = "id"))

return(cell_perturbations)

}
}
